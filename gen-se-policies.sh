#!/bin/bash

set -e

usage="$(basename "$0") [-h] [-i INPUT_LOG_FILE] [-d DESTINATION] [-f]
Generate .se policy files from adb logcat
where:
    -h  show this help text
    -i  logcat file to process
    -d  destination of the .se policy files
    -f  set if you want to merge all rules in single txt file named gen-se-polocies.txt"

# constant
AVC_DENIED_MATCH="avc: denied"

# Parse each line of log to build the policy rule
parsePolicy() {
    TCONTEXT_MATCHER='tcontext=u:(object_r|r):(\w*?):'
    SCONTEXT_MATCHER='scontext=u:r:(\w*?):'
    T_CLASS_MATCHER='tclass=(\w*?)\s'
    COMMAND_MATCHER='\{\s(.*)\s\}'

    if [[ $1 =~ $SCONTEXT_MATCHER ]]
    then
        scontext=${BASH_REMATCH[1]}
    else
     echo "No scontext found"
     exit 1
    fi

    if [[ $1 =~ $TCONTEXT_MATCHER ]]
    then
        tcontext=${BASH_REMATCH[2]}
    else
     echo "No tcontext found"
     exit 1
    fi

    if [[ $1 =~ $T_CLASS_MATCHER ]]
    then
        tclass=${BASH_REMATCH[1]}
    else
     echo "No tclass found"
     exit 1
    fi

    if [[ $1 =~ $COMMAND_MATCHER ]]
    then
        command=${BASH_REMATCH[1]}
    else
     echo "No command found"
     exit 1
    fi
    echo "allow $scontext $tcontext:$tclass { $command };"
}



# Processing arguments
while getopts "d:i:fh" option; do
  case $option in
    h) echo "$usage"; exit;;
    i) INPUT_LOG_FILE="$OPTARG";;
    d) DESTINATION="$OPTARG";;
    f) FLATTEN=true;;
    \?) echo "Unknown option: -$OPTARG" >&2; exit 1;;
    :) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
    *) echo "Unimplemented option: -$option" >&2; exit 1;;
  esac
done

# mandatory arguments
if [ ! "$INPUT_LOG_FILE" ] || [ ! "$DESTINATION" ]; then
  echo "arguments -i and -d must be provided"
  echo "$usage" >&2; exit 1
fi

declare -a policies
i=0
while read line; do
    if [[ "$line" == *"$AVC_DENIED_MATCH"* ]]; then
        # Parse policy from log line
        policy=$(parsePolicy "$line")
        if ! [[ " ${policies[*]} " =~ " ${policy} " ]]; then

                policies[$i]=$policy
                i=$((i+1))

        fi
    fi
done <$INPUT_LOG_FILE
echo $FLATTEN
if [ "$FLATTEN" = true ] ; then
    for policy in "${policies[@]}"
    do
        echo "$policy" >> "$DESTINATION/gen-se-polocies.txt"
    done
else
    declare -A grouped_policies
    for policy in "${policies[@]}"
    do
        policy_name=$(echo $policy | head -n1 | awk '{print $2;}')
        grouped_policies[$policy_name]+=$policy
    done
    IFS=';'
    for KEY in "${!grouped_policies[@]}"; do
        read -ra ADDR <<<"${grouped_policies[$KEY]}"
        if ! [[ -f "$DESTINATION/$KEY.se" ]]; then
            touch "$DESTINATION/$KEY.se"
        fi
        grep -qxF "# Generated by gen-se-policies" "$DESTINATION/$KEY.se" || echo "# Generated by gen-se-policies" >> "$DESTINATION/$KEY.se"
        for line in "${ADDR[@]}"; do
            grep -qxF "$line;" "$DESTINATION/$KEY.se" || echo "$line;" >> "$DESTINATION/$KEY.se"
        done
    done
fi



